using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace HexTex.OpenGL {
    public interface IGL {
        //// gles2 API compatibility
        //// GL_ES_VERSION_2_0

        //typedef khronos_int8_t GLbyte;
        //typedef khronos_float_t GLclampf;
        //typedef khronos_int32_t GLfixed;
        //typedef short GLshort;
        //typedef unsigned short GLushort;
        //typedef void GLvoid;
        //typedef struct __GLsync *GLsync;
        //typedef khronos_int64_t GLint64;
        //typedef khronos_uint64_t GLuint64;
        //typedef unsigned int GLenum;
        //typedef unsigned int GLuint;
        //typedef char GLchar;
        //typedef khronos_float_t GLfloat;
        //typedef khronos_ssize_t GLsizeiptr;
        //typedef khronos_intptr_t GLintptr;
        //typedef unsigned int GLbitfield;
        //typedef int GLint;
        //typedef unsigned char GLboolean;
        //typedef int GLsizei;
        //typedef khronos_uint8_t GLubyte;

        void ActiveTexture(uint texture);
        void AttachShader(uint program, uint shader);
        void BindAttribLocation(uint program, uint index, [In] IntPtr /*char*/name);
        void BindBuffer(uint target, uint buffer);
        void BindFramebuffer(uint target, uint framebuffer);
        void BindRenderbuffer(uint target, uint renderbuffer);
        void BindTexture(/*GLTextureTarget*/uint target, uint texture);
        void BlendColor(float red, float green, float blue, float alpha);
        void BlendEquation(/*GLenum*/uint mode);
        void BlendEquationSeparate(/*GLenum*/uint modeRGB, /*GLenum*/uint modeAlpha);
        void BlendFunc(/*GLenum*/uint sfactor, /*GLenum*/uint dfactor);
        void BlendFuncSeparate(/*GLenum*/uint sfactorRGB, /*GLenum*/uint dfactorRGB, /*GLenum*/uint sfactorAlpha, /*GLenum*/uint dfactorAlpha);
        void BufferData(uint target, uint size, [In] IntPtr data, uint usage);
        void BufferSubData(uint target, uint offset, uint size, [In] IntPtr data);
        /*GLenum*/uint CheckFramebufferStatus(uint target);
        void Clear(uint mask);
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearDepthf(float d);
        void ClearStencil(int s);
        void ColorMask(bool red, bool green, bool blue, bool alpha);//GLboolean!!!
        void CompileShader(uint shader);
        void CompressedTexImage2D(/*GLTextureFaceTarget*/uint target, int level, /*GLPixelFormat*/uint internalformat, int width, int height, int border, int imageSize, [In] IntPtr data);
        void CompressedTexSubImage2D(/*GLTextureFaceTarget*/uint target, int level, int xoffset, int yoffset, int width, int height, /*GLenum*/uint format, int imageSize, [In] IntPtr data);
        void CopyTexImage2D(/*GLTextureFaceTarget*/uint target, int level, /*GLPixelFormat*/uint internalformat, int x, int y, int width, int height, int border);
        void CopyTexSubImage2D(/*GLTextureFaceTarget*/uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        uint CreateProgram();
        uint CreateShader(uint type);
        void CullFace(/*GLFaceCull*/uint mode);
        void DeleteBuffers(int n, [In] uint[] buffers);
        void DeleteFramebuffers(int n, [In] uint[] framebuffers);
        void DeleteProgram(uint program);
        void DeleteRenderbuffers(int n, [In] uint[] renderbuffers);
        void DeleteShader(uint shader);
        void DeleteTextures(int n, [In] uint[] textures);
        void DepthFunc(/*GLFunc*/uint func);
        void DepthMask(bool flag);
        void DepthRangef(float n, float f);
        void DetachShader(uint program, uint shader);
        void Disable(uint cap);
        void DisableVertexAttribArray(uint index);
        void DrawArrays(/*GLPrimitiveType*/uint mode, int first, int count);
        void DrawElements(/*GLPrimitiveType*/uint mode, int count, uint type, [In] IntPtr indices);
        void Enable(uint cap);
        void EnableVertexAttribArray(uint index);
        void Finish();
        void Flush();
        void FramebufferRenderbuffer(uint target, /*GLRenderbufferAttachment*/uint attachment, uint renderbuffertarget, uint renderbuffer);
        void FramebufferTexture2D(uint target, /*GLRenderbufferAttachment*/uint attachment, /*GLTextureFaceTarget*/uint textarget, uint texture, int level);
        void FrontFace(uint mode);
        void GenBuffers(int n, uint[] buffers);
        void GenerateMipmap(/*GLTextureTarget*/uint target);
        void GenFramebuffers(int n, uint[] framebuffers);
        void GenRenderbuffers(int n, uint[] renderbuffers);
        void GenTextures(int n, uint[] textures);
        void GetActiveAttrib(uint program, uint index, int bufSize, IntPtr /*int*/ length, IntPtr /*int*/ size, IntPtr /*GLenum*/ type, IntPtr /*char*/ name);
        void GetActiveUniform(uint program, uint index, int bufSize, IntPtr /*int*/ length, IntPtr /*int*/ size, IntPtr /*GLenum*/ type, IntPtr /*char*/ name);
        void GetAttachedShaders(uint program, int maxCount, IntPtr /*int*/ count, IntPtr /*uint*/ shaders);
        int GetAttribLocation(uint program, string name);//[In] IntPtr /*char*/
        void GetBooleanv(/*GLenum*/uint pname, IntPtr /*GLboolean*/ data);
        void GetBufferParameteriv(/*GLenum*/uint target, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        /*GLenum*/uint GetError();
        void GetFloatv(/*GLenum*/uint pname, float[] data);
        void GetFramebufferAttachmentParameteriv(/*GLenum*/uint target, /*GLenum*/uint attachment, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        void GetIntegerv(uint pname, int[] data);
        void GetProgramiv(uint program, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        void GetProgramInfoLog(uint program, int bufSize, IntPtr /*int*/ length, IntPtr /*char*/ infoLog);
        void GetRenderbufferParameteriv(/*GLenum*/uint target, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        void GetShaderiv(uint shader, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        void GetShaderInfoLog(uint shader, int bufSize, IntPtr /*int*/ length, IntPtr /*char*/ infoLog);
        void GetShaderPrecisionFormat(/*GLenum*/uint shadertype, /*GLenum*/uint precisiontype, IntPtr /*int*/ range, IntPtr /*int*/ precision);
        void GetShaderSource(uint shader, int bufSize, IntPtr /*int*/ length, IntPtr /*char*/ source);
        IntPtr _GetString(uint name);
        void GetTexParameterfv(/*GLenum*/uint target, /*GLenum*/uint pname, IntPtr /*float*/ _params);
        void GetTexParameteriv(/*GLenum*/uint target, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        void GetUniformfv(uint program, int location, IntPtr /*float*/ _params);
        void GetUniformiv(uint program, int location, IntPtr /*int*/ _params);
        int GetUniformLocation(uint program, string name);//[In] IntPtr /*char*/
        void GetVertexAttribfv(uint index, /*GLenum*/uint pname, IntPtr /*float*/ _params);
        void GetVertexAttribiv(uint index, /*GLenum*/uint pname, IntPtr /*int*/ _params);
        void GetVertexAttribPointerv(uint index, /*GLenum*/uint pname, IntPtr /*void * */ pointer);
        void Hint(/*GLenum*/uint target, /*GLenum*/uint mode);
        bool IsBuffer(uint buffer);
        bool IsEnabled(/*GLenum*/uint cap);
        bool IsFramebuffer(uint framebuffer);
        bool IsProgram(uint program);
        bool IsRenderbuffer(uint renderbuffer);
        bool IsShader(uint shader);
        bool IsTexture(uint texture);
        void LineWidth(float width);
        void LinkProgram(uint program);
        void PixelStorei(/*GLenum*/uint pname, int param);
        void PolygonOffset(float factor, float units);
        void ReadPixels(int x, int y, int width, int height, /*GLPixelFormat*/uint format, /*GLPixelType*/uint type, IntPtr /*void*/ pixels);//only format=RGBA,type=UBYTE is guaranteed to be supported
        void ReleaseShaderCompiler();
        void RenderbufferStorage(uint target, /*GLRenderbufferFormat*/uint internalformat, int width, int height);
        void SampleCoverage(float value, bool invert);
        void Scissor(int x, int y, int width, int height);
        void ShaderBinary(int count, [In] IntPtr /*uint*/ shaders, /*GLenum*/uint binaryformat, [In] IntPtr binary, int length);
        void ShaderSource(uint shader, int count, IntPtr /*const char *const* */ _string, [In] IntPtr /*int*/ length);
        void StencilFunc(/*GLFunc*/uint func, uint _ref, uint mask);
        void StencilFuncSeparate(/*GLFaceCull*/uint face, /*GLFunc*/uint func, uint _ref, uint mask);
        void StencilMask(uint mask);
        void StencilMaskSeparate(/*GLenum*/uint face, uint mask);
        void StencilOp(/*GLStencilOp*/uint fail, /*GLStencilOp*/uint zfail, /*GLStencilOp*/uint zpass);
        void StencilOpSeparate(/*GLFaceCull*/uint face, /*GLStencilOp*/uint sfail, /*GLStencilOp*/uint dpfail, /*GLStencilOp*/uint dppass);
        void TexImage2D(/*GLTextureFaceTarget*/uint target, int level, /*GLPixelFormat*/uint internalformat, int width, int height, int border, /*GLPixelFormat*/uint format, /*GLPixelType*/uint type, [In] IntPtr pixels);
        void TexParameterf(/*GLTextureTarget*/uint target, /*GLTextureParameter*/uint pname, float param);
        void TexParameterfv(/*GLTextureTarget*/uint target, /*GLTextureParameter*/uint pname, [In] IntPtr /*float*/ _params);
        void TexParameteri(/*GLTextureTarget*/uint target, /*GLTextureParameter*/uint pname, uint param);
        void TexParameteriv(/*GLTextureTarget*/uint target, /*GLTextureParameter*/uint pname, [In] IntPtr /*int*/ _params);
        void TexSubImage2D(/*GLTextureFaceTarget*/uint target, int level, int xoffset, int yoffset, int width, int height, /*GLPixelFormat*/uint format, /*GLPixelType*/uint type, [In] IntPtr pixels);
        void Uniform1f(uint location, float v0);
        void Uniform1fv(uint location, int count, [In] IntPtr /*float*/ value);
        void Uniform1i(uint location, int v0);
        void Uniform1iv(uint location, int count, [In] IntPtr /*int*/ value);
        void Uniform2f(uint location, float v0, float v1);
        void Uniform2fv(uint location, int count, [In] IntPtr /*float*/ value);
        void Uniform2i(uint location, int v0, int v1);
        void Uniform2iv(uint location, int count, [In] IntPtr /*int*/ value);
        void Uniform3f(uint location, float v0, float v1, float v2);
        void Uniform3fv(uint location, int count, [In] IntPtr /*float*/ value);
        void Uniform3i(uint location, int v0, int v1, int v2);
        void Uniform3iv(uint location, int count, [In] IntPtr /*int*/ value);
        void Uniform4f(uint location, float v0, float v1, float v2, float v3);
        void Uniform4fv(uint location, int count, [In] IntPtr /*float*/ value);
        void Uniform4i(uint location, int v0, int v1, int v2, int v3);
        void Uniform4iv(uint location, int count, [In] IntPtr /*int*/ value);
        void UniformMatrix2fv(uint location, int count, bool transpose, [In] IntPtr /*float*/ value);
        void UniformMatrix3fv(uint location, int count, bool transpose, [In] IntPtr /*float*/ value);
        void UniformMatrix4fv(uint location, int count, bool transpose, [In] IntPtr /*float*/ value);
        void UseProgram(uint program);
        void ValidateProgram(uint program);
        void VertexAttrib1f(uint index, float x);
        void VertexAttrib1fv(uint index, [In] IntPtr /*float*/ v);
        void VertexAttrib2f(uint index, float x, float y);
        void VertexAttrib2fv(uint index, [In] IntPtr /*float*/ v);
        void VertexAttrib3f(uint index, float x, float y, float z);
        void VertexAttrib3fv(uint index, [In] IntPtr /*float*/ v);
        void VertexAttrib4f(uint index, float x, float y, float z, float w);
        void VertexAttrib4fv(uint index, [In] IntPtr /*float*/ v);
        void VertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, [In] IntPtr pointer);
        void Viewport(int x, int y, int width, int height);
    }
}
